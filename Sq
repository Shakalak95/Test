async function exportSonarQubeIssues() {
    const baseUrl = "https://your-sonarqube-instance";
    const projectKey = "your-project-key";

    const apiUrl = `${baseUrl}/api/issues/search?projectKeys=${projectKey}`;

    try {
        const response = await fetch(apiUrl);
        if (!response.ok) {
            throw new Error(`Request failed with status: ${response.status}`);
        }

        const data = await response.json();
        return data.issues; // Array of issues
    } catch (error) {
        console.error("Error exporting SonarQube issues:", error);
    }
}

// Usage
exportSonarQubeIssues().then(issues => {
    console.log("Exported issues:", issues);
});
async function changeSonarQubeBranch(projectKey, newBranch) {
    const baseUrl = "https://your-sonarqube-instance";
    const apiUrl = `${baseUrl}/api/settings/set`;

    const payload = {
        keys: `${projectKey}:sonar.branch`,
        values: newBranch
    };

    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Authorization': 'Bearer your-auth-token' // Replace with your authentication token
            },
            body: new URLSearchParams(payload)
        });

        if (!response.ok) {
            throw new Error(`Request failed with status: ${response.status}`);
        }

        const data = await response.json();
        console.log("Project branch updated:", data);
    } catch (error) {
        console.error("Error changing SonarQube branch:", error);
    }
}


async function checkAuthenticationToken() {
    const baseUrl = "https://your-sonarqube-instance";
    const apiUrl = `${baseUrl}/api/projects/search`;

    try {
        const response = await fetch(apiUrl, {
            headers: {
                'Authorization': 'Bearer your-auth-token' // Replace with your authentication token
            }
        });

        if (response.ok) {
            console.log("Authentication token is valid.");
        } else {
            console.log("Authentication token is not valid.");
        }
    } catch (error) {
        console.error("Error checking authentication token:", error);
    }
}

// Usage
checkAuthenticationToken();
async function checkAuthenticationToken() {
    const baseUrl = "https://your-sonarqube-instance";
    const apiUrl = `${baseUrl}/api/projects/search`;

    try {
        const response = await fetch(apiUrl, {
            headers: {
                'Authorization': 'Bearer your-auth-token' // Replace with your authentication token
            }
        });

        if (response.ok) {
            console.log("Authentication token is valid.");
        } else {
            console.log("Authentication token is not valid.");
        }
    } catch (error) {
        console.error("Error checking authentication token:", error);
    }
}

// Usage
checkAuthenticationToken();



// Usage
const projectKey = "your-project-key";
const newBranch = "new-branch-name";
changeSonarQubeBranch(projectKey, newBranch);
